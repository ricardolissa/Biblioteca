<?php

namespace UntdfBundle\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\File\File;
use UntdfBundle\Entity\Libro;

/**
 * Libro controller.
 *
 * 
 */
class LibroController extends Controller
{
    /**
     * Lists all libro entities.
     *
     * @Route("admin/libro", name="libro_index")
     * @Method("GET")
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getManager();

        $libros = $em->getRepository('UntdfBundle:Libro')->findAll();

        return $this->render('@Untdf/Libros/index.html.twig', array(
            'libros' => $libros,
        ));
    }

    /**
     * Creates a new libro entity.
     *
     * @Route("admin/libro/new", name="libro_new")
     * @Method({"GET", "POST"})
     */
    public function newAction(Request $request)
    {
        $libro = new Libro();
        $form = $this->createForm('UntdfBundle\Form\LibroType', $libro);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            
            $file = $libro->getFoto();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('foto_directory'),
                $fileName
            );

            $libro->setFoto($fileName);

            $em->persist($libro);
            $em->flush();

            return $this->redirectToRoute('libro_show', array('id' => $libro->getId()));
        }

        return $this->render('@Untdf/Libros/new.html.twig', array(
            'libro' => $libro,
            'form' => $form->createView(),
        ));
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * Finds and displays a libro entity.
     *
     * @Route("libro/{id}", name="libro_show")
     * @Method("GET")
     */
    public function showAction(Libro $libro)
    {
        $deleteForm = $this->createDeleteForm($libro);

        return $this->render('@Untdf/Libros/show.html.twig', array(
            'libro' => $libro,
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Displays a form to edit an existing libro entity.
     *
     * @Route("admin/libro/{id}/edit", name="libro_edit")
     * @Method({"GET", "POST"})
     */
    public function editAction(Request $request, Libro $libro)
    {
        
        $fotoActual = $libro->getFoto();

        $libro->setFoto(
        new File($this->getParameter('foto_directory').'/'.$libro->getFoto())
        );
        $deleteForm = $this->createDeleteForm($libro);

        $editForm = $this->createForm('UntdfBundle\Form\LibroType', $libro);
        $editForm->handleRequest($request);
        
       
        
        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $this->getDoctrine()->getManager()->flush();



            return $this->redirectToRoute('libro_edit', array('id' => $libro->getId()));
        }

       

        return $this->render('@Untdf/Libros/edit.html.twig', array(
            'libro' => $libro,
            'fotoActual' => $fotoActual,
            'edit_form' => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Deletes a libro entity.
     *
     * @Route("admin/libro/{id}", name="libro_delete")
     * @Method("DELETE")
     */
    public function deleteAction(Request $request, Libro $libro)
    {
        $form = $this->createDeleteForm($libro);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($libro);
            $em->flush();
        }

        return $this->redirectToRoute('libro_index');
    }

    /**
     * Creates a form to delete a libro entity.
     *
     * @param Libro $libro The libro entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(Libro $libro)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('libro_delete', array('id' => $libro->getId())))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }
}
